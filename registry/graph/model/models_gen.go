// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type ExpireServiceInput struct {
	// id is a unique identifier for the service, if omitted then one will be generated
	ID string `json:"id"`
}

type NewServiceInput struct {
	// id is a unique identifier for the service, if omitted then one will be generated
	ID *string `json:"id"`
	// name is a human readable name of the service
	Name string `json:"name"`
	// description is a short description of the service
	Description *string `json:"description"`
	// version is the version of the service
	Version *string `json:"version"`
	// type is category type
	Type *string `json:"type"`
	// address is the address:port of the service is clients can access it on
	Address string `json:"address"`
	// ttl is services time to live before it is expired. If omitted then 30s will be used as the default
	TTL *string `json:"ttl"`
}

type RenewServiceInput struct {
	// id is a unique identifier for the service, if omitted then one will be generated
	ID string `json:"id"`
	// ttl is services time to live before it is expired. If omitted then 30s will be used as the default
	TTL *string `json:"ttl"`
}

type Service struct {
	// id is a unique identifier for the service, if omitted then one will be generated
	ID string `json:"id"`
	// name is a human readable name of the service
	Name string `json:"name"`
	// description is a short description of the service
	Description string `json:"description"`
	// version is the version of the service
	Version string `json:"version"`
	// type is category type
	Type string `json:"type"`
	// address is the address:port of the service is clients can access it on
	Address string `json:"address"`
	// created_at is the datetime when the service was created
	CreatedAt time.Time `json:"created_at"`
	// expires_at is the datetime when the is scheduled to expire
	ExpiresAt time.Time `json:"expires_at"`
	// ttl is the time to live duration of the service before it is expired
	TTL string `json:"ttl"`
}
