syntax = "proto3";

option go_package = ".;registry";

// Registry containing registered nodes.
message Registry {
    // Nodes are all the registered nodes in the registry.
    repeated Node nodes = 1 [json_name="nodes"];
}


// Node is a node in the registry.
message Node {
    // Uid is a generated unique identifier for the service.
    string uid = 1 [json_name="uid"];

    // Name is the name of the service.
    string name = 2 [json_name="name"];

    // Address is the address the node is reachable in the format <network>://<address>:<port>
    string address = 3 [json_name="address"];

    // ExpiryDuration is the nodes expiry duration eg: 1s. 
    // If you are registrying a new node with no expiry, the default will be used.
    string expiry_duration = 4 [json_name="expiry"];

    // Expired returns true if the node has expired.
    bool expired = 5 [json_name="expired"];

    // Expiry returns the expiry date time in UTC RFC333 format
    string expiry = 6 [json_name="expiry"];

    // Metadata is any additional information about the node.
    map<string, string> metadata = 7 [json_name="metadata"];
}


// SearchReq is a request used for searching for node by name.
message SearchReq {
    // Name is the node name to search for.
    string Name = 1 [json_name="name"];
}


// SearchResp is a response containing nodes matching the search request.
message SearchResp {
    // Nodes are all the nodes maching the search request.
    repeated Node nodes = 1 [json_name="nodes"];
}


// GetReq is a request used for fetching a registered node.
message GetReq {
    // Uid is the unique identifier of a node.
    string uid = 1 [json_name="uid"];
}

// HeartbeatReq is a hartbeat pulse to keep a node alive and
// prevent it from expiring.
message HeartbeatReq {
    // Uid is the uid of the node that you are sending the heartbeat.
    string uid = 1 [json_name="uid"];

    // Duration is how long the node will stay alive before expecting
    // next heartbeat pulse else the node will expire. If this field
    // is omitted, then the default expiry duration will be used. 
    string duration = 2 [json_name="duration"];
}

// HeartbeatResp is the heartbeat response with the new expiry datetime
// in UTC RFC3339 format.
message HeartbeatResp {
    // Uid is the uid of the node that you are sending the heartbeat.
    string uid = 1 [json_name="uid"];

    // Expiry is the new expiry datetime in UTC RFC3339 format.
    string expiry = 2 [json_name="expiry"];
}


// RegistryService is a RPC service.
service RegistryService {
    // Register registers a new node with the registry.
    // The `UID` field is ignored with this request.
    rpc Register(Node) returns (Node);

    // Unregister unregisters a node from the registry.
    // Note that the `UID` field is required else a error is returned.
    rpc Unregister(Node) returns (Node);

    // Heartbeat does a single heartbeat update resetting the expiry.
    // Note that the `UID` field is required else a error is returned.
    rpc Heartbeat(HeartbeatReq) returns (HeartbeatResp);

    // Heartbeats opens a bidirectional heartbeat stream used for
    // continues heartbeat updates.
    // Note that the `UID` field is required else a error is returned.
    rpc Heartbeats(stream HeartbeatReq) returns (stream HeartbeatResp);

    // Search searchs the registry for nodes.
    // If the `Name` field is `*`, then all nodes are returned.`
    rpc Search(SearchReq) returns (SearchResp);

    // Get returns the node by `UID`.
    rpc Get(GetReq) returns (Node);
}